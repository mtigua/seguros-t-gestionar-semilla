buildscript {

  repositories {
     mavenCentral()
    
  }
  dependencies {
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

plugins {
	
	id 'org.springframework.boot' version '2.1.6.RELEASE'	
	// Sonar
	id "org.sonarqube" version "2.7.1"
	// OWASP
	id 'org.owasp.dependencycheck' version "2.1.1"
	// Necesario para dependencia maven
	id "io.spring.dependency-management" version "1.0.3.RELEASE"
	
	id 'io.franzbecker.gradle-lombok' version '1.8'
	id 'java'
	
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'
apply plugin: 'jacoco'
apply plugin: 'groovy'
apply plugin: "org.sonarqube"

group = 'seguros-ti-gestionar-semilla'
version = '1.2.7'
sourceCompatibility = '1.8'

bootJar {
    baseName = 'seguros-ti-gestionar-semilla'
    version = System.getProperty('tag', '1.2.7')
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "Greenwich.SR1")
}

dependencies {
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'	
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	compile "org.springframework.kafka:spring-kafka:2.2.7.RELEASE"	
	compile group: 'ch.qos.logback.contrib', name: 'logback-jackson', version: '0.1.5'
	compile group: 'ch.qos.logback.contrib', name: 'logback-json-classic', version: '0.1.5'
	compile group: 'com.github.danielwegener', name: 'logback-kafka-appender', version: '0.2.0-RC1'
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
	compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
	compileOnly 'org.projectlombok:lombok:1.18.4'
    annotationProcessor 'org.projectlombok:lombok:1.18.4'	
	compile 'net.logstash.logback:logstash-logback-encoder:4.11'
	compile ('com.microsoft.sqlserver:mssql-jdbc')
	compile "org.json:json:20180813"
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.10'	
	implementation 'org.springframework.boot:spring-boot-starter-security'
	compile ("org.springframework.boot:spring-boot-starter-jdbc")
	//Add Swagger2 dependencies
	compile('io.springfox:springfox-swagger2:2.9.2')
    compile('io.springfox:springfox-swagger-ui:2.9.2')
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	compile 'io.jsonwebtoken:jjwt:0.7.0'
	runtime group: 'org.springframework.cloud', name: 'spring-cloud-starter-bus-kafka', version: '2.2.0.RELEASE'
    
    //Multiple DataSource
    runtime("com.h2database:h2:1.4.196")
    compile ('com.microsoft.sqlserver:mssql-jdbc')
    
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

sonarqube {
    properties {
       property 'sonar.projectKey', 'seguros-ti-semilla'
		property 'sonar.host.url', 'http://sonar.rfsc.cl:9000/sonarqube'
		property 'sonar.projectName', 'seguros-ti-semilla'
		property 'sonar.scm.disabled', 'true'
		property 'sonar.login', 'ef27af73bbad6d1246ebe63a2eec0f48057c4a41'
    }
}


if (!project.hasProperty("dockerImgName")) {
    ext.dockerImgName = "${bootJar.baseName}"
}

if (!project.hasProperty("dockerTag")) {
    ext.dockerTag = "develop"
}
if (!project.hasProperty("dockerRegistry")) {
    ext.dockerRegistry = "operacionesregistry.azurecr.io"
}
if (!project.hasProperty("dockerPushToRegistry")) {
    ext.dockerPushToRegistry = true
}

if (!project.hasProperty("kafkaTruststoreJks")) {
    ext.kafkaTruststoreJks = "truststore-kafka.jks"
}

task buildDocker(type: Docker, dependsOn: build) {
	baseImage = "frolvlad/alpine-oraclejre8:cleaned"
	maintainer = "seguros.rfsc"
	hostUrl = "https://operacionesregistry.azurecr.io"
	push = dockerPushToRegistry.toBoolean()
	dryRun = false
	tagVersion = "${dockerTag}"
	tag = "${dockerRegistry}/${dockerImgName}"
	addFile {
		from bootJar
		rename { "${dockerImgName}.jar" }
	}
	addFile("./java-entrypoint.sh", "/java-entrypoint.sh")
	runCommand("mkdir /certs")
	addFile("./certs/${kafkaTruststoreJks}", "/certs")
	exposePort(8080)
	entryPoint([
			"/java-entrypoint.sh",
			"/${dockerImgName}.jar"
	])
}

bootRun {
    jvmArgs = ["-Djava.security.egd=file:/dev/./urandom","-Dspring.profiles.active=local"]
}
